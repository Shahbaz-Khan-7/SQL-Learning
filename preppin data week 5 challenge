--Create the bank code by splitting out off the letters from the Transaction code, call this field 'Bank'
--Change transaction date to the just be the month of the transaction
--Total up the transaction values so you have one row for each bank and month combination
--Rank each bank for their value of transactions each month against the other banks. 1st is the highest value of transactions, 3rd the lowest. 
--Without losing all of the other data fields, find:
--The average rank a bank has across all of the months, call this field 'Avg Rank per Bank'
--The average transaction value per rank, call this field 'Avg Transaction Value per Rank'

SELECT * FROM TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK01;

WITH RankedTransactions AS (
    SELECT 
        monthname(date(transaction_date, 'dd/mm/yyyy hh24:mi:ss')) AS transaction_month,
        split_part(transaction_code, '-', 1) AS bank,
        SUM(value) AS total_value,
        RANK() OVER (PARTITION BY monthname(date(transaction_date, 'dd/mm/yyyy hh24:mi:ss')) ORDER BY SUM(value) DESC) AS transaction_rank
    FROM 
        TIL_PLAYGROUND.PREPPIN_DATA_INPUTS.PD2023_WK01
    GROUP BY 
        transaction_month, bank
),
AvgRankPerBank AS (
    SELECT 
        bank,
        AVG(transaction_rank) AS avg_rank_per_bank
    FROM 
        RankedTransactions
    GROUP BY 
        bank
),
AvgTransactionValuePerRank AS (
    SELECT 
        transaction_rank,
        AVG(total_value) AS avg_transaction_value_per_rank
    FROM 
        RankedTransactions
    GROUP BY 
        transaction_rank
)
SELECT 
    rt.*,
    ab.avg_rank_per_bank AS Avg_Rank_per_Bank,
    at.avg_transaction_value_per_rank AS Avg_Transaction_Value_per_Rank
FROM 
    RankedTransactions rt
JOIN 
    AvgRankPerBank ab ON rt.bank = ab.bank
JOIN 
    AvgTransactionValuePerRank at ON rt.transaction_rank = at.transaction_rank AND rt.transaction_rank = at.transaction_rank;